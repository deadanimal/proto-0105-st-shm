{"version":3,"sources":["/Users/muhdraziman/Downloads/proto-0105-st-shm/node_modules/ngx-siema/siema.service.js"],"names":[],"mappings":"AAAA;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAsFM;;;2BAGqB,AAGzB","file":"siema.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\nimport 'rxjs/add/operator/publish';\nvar next$ = new ReplaySubject(1);\nvar prev$ = new ReplaySubject(1);\nvar goTo$ = new ReplaySubject(1);\nvar remove$ = new ReplaySubject(1);\nvar insert$ = new ReplaySubject(1);\nvar prepend$ = new ReplaySubject(1);\nvar append$ = new ReplaySubject(1);\nvar destroy$ = new ReplaySubject(1);\nvar currentSlide$ = new ReplaySubject(1);\nvar NgxSiemaService = (function () {\n    function NgxSiemaService() {\n    }\n    NgxSiemaService.prototype.next = function (numbers, selector) {\n        if (numbers === void 0) { numbers = 1; }\n        var listener = new BehaviorSubject(null);\n        next$.next({ selector: selector, numbers: numbers, listener: listener });\n        return listener.asObservable();\n    };\n    NgxSiemaService.prototype.prev = function (numbers, selector) {\n        if (numbers === void 0) { numbers = 1; }\n        var listener = new BehaviorSubject(null);\n        prev$.next({ selector: selector, numbers: numbers, listener: listener });\n        return listener.asObservable();\n    };\n    NgxSiemaService.prototype.goTo = function (index, selector) {\n        var listener = new BehaviorSubject(null);\n        goTo$.next({ selector: selector, index: index, listener: listener });\n        return listener.asObservable();\n    };\n    NgxSiemaService.prototype.remove = function (index, selector) {\n        var listener = new BehaviorSubject(null);\n        remove$.next({ selector: selector, index: index, listener: listener });\n        return listener.asObservable();\n    };\n    NgxSiemaService.prototype.insert = function (item, index, selector) {\n        var listener = new BehaviorSubject(null);\n        insert$.next({ selector: selector, item: item, index: index, listener: listener });\n        return listener.asObservable();\n    };\n    NgxSiemaService.prototype.prepend = function (item, selector) {\n        var listener = new BehaviorSubject(null);\n        prepend$.next({ selector: selector, item: item, listener: listener });\n        return listener.asObservable();\n    };\n    NgxSiemaService.prototype.append = function (item, selector) {\n        var listener = new BehaviorSubject(null);\n        append$.next({ selector: selector, item: item, listener: listener });\n        return listener.asObservable();\n    };\n    NgxSiemaService.prototype.destroy = function (restoreMarkup, selector) {\n        if (restoreMarkup === void 0) { restoreMarkup = false; }\n        var listener = new BehaviorSubject(null);\n        destroy$.next({ selector: selector, listener: listener });\n        return listener.asObservable();\n    };\n    NgxSiemaService.prototype.currentSlide = function (selector) {\n        var listener = new BehaviorSubject(null);\n        currentSlide$.next({ selector: selector, listener: listener });\n        return listener.asObservable();\n    };\n    NgxSiemaService.prototype.onNext = function () {\n        return next$.publish().refCount();\n    };\n    NgxSiemaService.prototype.onPrev = function () {\n        return prev$.publish().refCount();\n    };\n    NgxSiemaService.prototype.onGoTo = function () {\n        return goTo$.publish().refCount();\n    };\n    NgxSiemaService.prototype.onRemove = function () {\n        return remove$.publish().refCount();\n    };\n    NgxSiemaService.prototype.onInsert = function () {\n        return insert$.publish().refCount();\n    };\n    NgxSiemaService.prototype.onPrepend = function () {\n        return prepend$.publish().refCount();\n    };\n    NgxSiemaService.prototype.onAppend = function () {\n        return append$.publish().refCount();\n    };\n    NgxSiemaService.prototype.onDestroy = function () {\n        return destroy$.publish().refCount();\n    };\n    NgxSiemaService.prototype.onCurrentSlide = function () {\n        return currentSlide$.publish().refCount();\n    };\n    return NgxSiemaService;\n}());\nexport { NgxSiemaService };\nNgxSiemaService.decorators = [\n    { type: Injectable },\n];\nNgxSiemaService.ctorParameters = function () { return []; };\n"]}